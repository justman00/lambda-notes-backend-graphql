type Query {
  users(query: String): [User!]!
  me: User!
  notes(query: String): [Note!]!
  myNotes: [Note!]!
  note(query: ID!): Note!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!

  login(data: AuthInput!): AuthPayload!

  createNote(data: CreateNoteInput!): Note!
  updateNote(id: ID!, data: UpdateNoteInput!): Note!
  deleteNote(id: ID!): Note!
}

# type Subscription {}

input AuthInput {
  email: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
}

input CreateNoteInput {
  title: String!
  body: String!
  tags: [String!]
}

input UpdateNoteInput {
  title: String
  body: String
  tags: [String!]
}

type User {
  id: ID!
  name: String!
  email: String
  password: String!
  notes: [Note!]!
}

type Note {
  id: ID!
  title: String!
  body: String!
  tags: [String!]
  author: User!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
